{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Spinner","className","id","viewBox","dx","dy","stdDeviation","flood-color","style","fill","stroke","strokeWidth","strokeLinecap","filter","cx","cy","r","FormName","useState","name","setName","onSubmit","e","preventDefault","localStorage","setItem","window","location","reload","htmlFor","onChange","target","value","type","Main","Date","time","setTime","update","useEffect","setInterval","quote","setQuote","fetch","then","data","json","h","getHours","m","getMinutes","s","getSeconds","fontSize","content","author","Content","children","position","top","left","width","height","params","particles","number","density","enable","value_area","line_linked","opacity","move","direction","speed","size","anim","opacity_min","interactivity","events","onclick","mode","modes","push","particles_nb","retina_detect","App","getItem","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f365387f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Particles from \"react-particles-js\";\nimport \"./App.css\";\n\nfunction getName() {\n  const name = localStorage.getItem(\"myName\");\n  return name;\n}\n\nfunction Spinner() {\n  return (\n    <div className=\"spinner\" id=\"container\">\n      <svg viewBox=\"0 0 100 100\">\n        <defs>\n          <filter id=\"shadow\">\n            <feDropShadow dx=\"0\" dy=\"0\" stdDeviation=\"1.5\" flood-color=\"#fc6767\" />\n          </filter>\n        </defs>\n        <circle\n          id=\"spinner\"\n          style={{\n            fill: \"transparent\",\n            stroke: \"#fc6767\",\n            strokeWidth: \"2px\",\n            strokeLinecap: \"round\",\n            filter: \"url(#shadow)\",\n          }}\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n        />\n      </svg>\n    </div>\n  );\n}\n\nfunction FormName() {\n  const [name, setName] = useState(\"\");\n  const onChange = (e) => {\n    setName(e.target.value);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    localStorage.setItem(\"myName\", name);\n    setName(\"\");\n    window.location.reload();\n  };\n  return (\n    <div className=\"form-container\">\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <label htmlFor=\"name\">Siapa Kamu?</label>\n        <input\n          className=\"inputan\"\n          onChange={(e) => onChange(e)}\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n        />\n        <button className=\"button\" type=\"submit\"></button>\n      </form>\n      <div className=\"form-footer\">Kenalan dulu yuk!</div>\n    </div>\n  );\n}\n\nfunction Main({ name }) {\n  const [time, setTime] = useState(new Date());\n  const update = () => {\n    setTime(new Date());\n  };\n  useEffect(() => {\n    setInterval(update, 1000);\n  }, [time]);\n\n  const [quote, setQuote] = useState({});\n\n  useEffect(() => {\n    fetch(\"http://api.quotable.io/random\")\n      .then((data) => data.json())\n      .then((data) => setQuote(data));\n  }, []);\n\n  const h = time.getHours();\n  const m = time.getMinutes();\n  const s = time.getSeconds();\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <h1 style={{ fontSize: \"4rem\" }}>\n          {h % 24}:{m < 10 ? \"0\" + m : m}:{s < 10 ? \"0\" + s : s}\n        </h1>\n        {h % 24 >= 19 && <h1>Selamat Malam, {name}</h1>}\n        {h % 24 >= 15 && h <= 19 && <h1>Selamat Sore, {name}</h1>}\n        {h % 24 >= 11 && h <= 15 && <h1>Selamat Siang, {name}</h1>}\n        {h % 24 >= 5 && h <= 11 && <h1>Selamat Pagi, {name}</h1>}\n        {h % 24 >= 1 && h <= 5 && <h1>Selamat Petang, {name}</h1>}\n      </div>\n      <div className=\"footer\">\n        <p className=\"quote\">{quote.content}</p>\n        <p>~{quote.author}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction Content({ children }) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      >\n        <Particles\n          params={{\n            particles: {\n              number: {\n                value: 60,\n                density: {\n                  enable: true,\n                  value_area: 1500,\n                },\n              },\n              line_linked: {\n                enable: true,\n                opacity: 0.02,\n              },\n              move: {\n                direction: \"right\",\n                speed: 0.05,\n              },\n              size: {\n                value: 1,\n              },\n              opacity: {\n                anim: {\n                  enable: true,\n                  speed: 1,\n                  opacity_min: 0.05,\n                },\n              },\n            },\n            interactivity: {\n              events: {\n                onclick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n              },\n              modes: {\n                push: {\n                  particles_nb: 1,\n                },\n              },\n            },\n            retina_detect: true,\n          }}\n        />\n        {children}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  useEffect(() => {\n    return setName(getName());\n  }, []);\n\n  if (!name)\n    return (\n      <Content>\n        <FormName />\n      </Content>\n    );\n  if (name)\n    return (\n      <Content>\n        <Main name={name} />\n      </Content>\n    );\n  return <Spinner />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}